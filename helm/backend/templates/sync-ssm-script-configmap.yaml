apiVersion: v1
kind: ConfigMap
metadata:
  name: sync-ssm-script
  namespace: {{ .Values.namespaceOverride | default .Release.Namespace }}
data:
  sync-ssm-to-secret.sh: |
    #!/bin/bash
    set -e

    # ====== 설정값 (Helm values에서 주입) ======
    NS="{{ .Values.namespaceOverride | default .Release.Namespace }}"
    SECRET_NAME="backend-secrets"
    SSM_PATH="{{ .Values.ssm.path }}"
    REGION="{{ .Values.aws.region | default "ap-northeast-2" }}"
    TMP_FILE="/tmp/params.json"

    echo "[INFO] SSM ParameterStore → Kubernetes Secret 동기화 시작"
    echo "[INFO] Namespace       : $NS"
    echo "[INFO] Secret Name     : $SECRET_NAME"
    echo "[INFO] SSM Path        : $SSM_PATH"
    echo "[INFO] AWS Region      : $REGION"
    echo "----------------------------------------"

    # 1) SSM 값 가져오기
    echo "[STEP 1] AWS SSM 파라미터 조회"
    aws ssm get-parameters-by-path \
      --path "$SSM_PATH" \
      --with-decryption \
      --recursive \
      --region "$REGION" \
      --query 'Parameters[].{k:Name, v:Value}' \
      --output json > "$TMP_FILE"

    COUNT=$(jq length "$TMP_FILE")
    if [ "$COUNT" -eq 0 ]; then
      echo "[ERROR] SSM에서 파라미터를 찾을 수 없습니다. ($SSM_PATH)"
      exit 1
    fi
    echo "[INFO] $COUNT 개 파라미터 조회 완료"

    # 2) kubectl --from-literal 인자 만들기
    echo "[STEP 2] Kubernetes Secret literal 변환"
    LITERALS=$(jq -r '
      map("--from-literal=" +
          ( .k | sub(".*/";"") ) + "=" +
          ( .v | @sh | sub("^'\''";"" ) | sub("'\'$";"") )
      ) | join(" ")
    ' "$TMP_FILE")

    # 3) Secret 생성/갱신
    echo "[STEP 3] Secret 생성/갱신"
    kubectl -n "$NS" delete secret "$SECRET_NAME" --ignore-not-found
    eval kubectl -n "$NS" create secret generic "$SECRET_NAME" $LITERALS

    echo "[INFO] Secret 생성 완료:"
    kubectl -n "$NS" get secret "$SECRET_NAME" -o yaml | head -n 15
    echo "[DONE] 동기화 완료 ✅"
